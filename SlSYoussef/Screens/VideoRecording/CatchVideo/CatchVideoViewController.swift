//
//  CatchVideoViewController.swift
//  SLS
//
//  Created by youssef on 2/10/21.
//  Copyright Â© 2021 HadyOrg. All rights reserved.
//



import Foundation
import UIKit
import AVFoundation
import Photos
import UITextView_Placeholder
class CatchVideoViewController: UIViewController , AVCapturePhotoCaptureDelegate, LiveEndViewProtocal{
    
    
    
    @IBOutlet weak var TextViewSayCommet: UITextView!
    let cellIndentifier = "CommentCollectionViewCell"
    let cameraController = CameraController()
    
    @IBOutlet weak var CommentcollectionView: UICollectionView!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.

    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    
    override var prefersStatusBarHidden: Bool { return true }
    @IBAction func toggleFlash(_ sender: Any) {
        
        dismiss(animated: true,completion: nil)
    }
    @IBAction func shopNew(_ sender: Any) {
        let order = OederToSellerViewController()
        order.modalPresentationStyle = .overFullScreen
        present(order, animated: true, completion: nil)
        
    }
    
    @IBAction func massageBtn(_ sender: Any) {
        let endLive = LiveEndViewController()
        endLive.Deleget = self
        endLive.modalPresentationStyle = .overFullScreen
        present(endLive, animated: true) {
            
        }
    }
    
    func endLive() {
        dismiss(animated: true, completion: nil)
    }
    @IBAction func captureImage(_ sender: UIButton) {
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: image)
            }
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "iconfinder_flip_camera_3592674"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "iconfinder_flip_camera_3592674"), for: .normal)
            
        case .none:
            return
        }
    }
}

extension CatchVideoViewController {
    
    override func viewDidLoad() {
         configureCameraController()
        configurationcollectionView()
    }
    
    func configurationcollectionView(){
        CommentcollectionView.delegate = self
        CommentcollectionView.dataSource = self
        CommentcollectionView.register(UINib(nibName: cellIndentifier, bundle: nil), forCellWithReuseIdentifier: cellIndentifier)
    }
    
    func configureCameraController() {
        cameraController.prepare {(error) in
            if let error = error {
                print(error)
            }
            
            try? self.cameraController.displayPreview(on: self.capturePreviewView)
        }
    }
    
    
}

extension CatchVideoViewController : UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellIndentifier, for: indexPath) as! CommentCollectionViewCell
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let frame = CGRect(x: 0, y: 0, width: view.frame.width, height: 50)
        let dymCell = CommentCollectionViewCell(frame: frame)
        dymCell.layoutIfNeeded()
        let targetSize = CGSize(width: view.frame.width, height: 50)
        let estmaitedSize = dymCell.systemLayoutSizeFitting(targetSize)
        let height = max(40, estmaitedSize.height)
        return CGSize(width: collectionView.frame.width, height: height)
        
    }
    
    
    
}
